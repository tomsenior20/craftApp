name: 'Ticket Solution CI/CD'

on:
  push:
    branches:
      - main
      - FutureDevelopment

jobs:
  setup:
    runs-on: ubuntu-latest
    # Steps for setup
    steps:
      # Check out the repository
      - name: Checkout repository
        uses: actions/checkout@v3
      # Configure Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.20.5'

      - name: Clear npm cache
        run: npm cache clean --force
        
      # Install npm dependencies
      - name: Install npm dependencies
        run: |
          npm install next react react-dom sqlite3 typescript @types/react @types/react-dom express cors helmet jest @testing-library/react @testing-library/jest-dom jest-environment-jsdom jest-transform-stub

      - name: Install Docker Compose 
        run: |
          sudo apt-get update
          sudo apt-get install docker-compose
  test:
    runs-on: ubuntu-latest
    needs: setup
    # Steps for test
    steps:
      # Check out the repository again in the build job
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install npm dependencies
        run: npm install
      # Run Unit Tests
      - name: Run Unit Tests
        run: npm test
      - name: Run NPM TEST Coverage
        run: npm test -- --coverage

  audit:
    runs-on: ubuntu-latest
    needs: setup
    # Steps for test
    steps:
      # Check out the repository again in the build job
      - name: Checkout repository
        uses: actions/checkout@v3
      # Check for vulnerabilities
      - name: Check for Vulnerabilities
        run: npm audit
      # Run Audit fix for the vulnerabilities.
      - name: Fix vulnerabilities
        run: npm audit fix

  build:
    needs: [audit, test]
    runs-on: ubuntu-latest
    steps:
      # Check out the repository again in the deploy job
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install npm dependencies
        run: npm install
      # Build the project
      - name: Build project
        run: npm run build
        working-directory: ./

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Check out the repository again in the deploy job
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into Docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }} 

      # Build Docker Image
      - name: Construct Docker Image
        # run: docker build --no-cache -t craftapp:latest -f Dockerfile .
        run: |
          docker build --no-cache -t  tomsenior98/craftapp:latest -t tomsenior98/craftapp:${{ github.sha }} .

      - name: Install Docker Compose Plugin
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.22.0/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: Run Docker Compose
        run: |
          docker compose --version
          docker compose up --build -d

      # Push Docker Image
      - name: Push Docker Image
        run: | 
            docker push tomsenior98/craftapp:latest
            docker push tomsenior98/craftapp:${{ github.sha }}
      # Push To Render Environments.
      - name: Trigger Render Backend Deployment
        run: |
          curl -X POST "https://api.render.com/deploy/srv-ctdcihm8ii6s7392fmvg?key=FrkRD-8FR30?key=${{ secrets.RENDER_KEY }}"
      - name: Trigger Render Backend Deployment
        run: |
          curl -X POST "https://api.render.com/deploy/srv-ctdfhim8ii6s739423rg?key=GilZHjSmSgI?key=${{ secrets.RENDER_KEY }}"
  push_to_main:
    runs-on: ubuntu-latest
    needs: [audit, test, build]
    if: github.ref != 'refs/heads/main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install npm dependencies
        run: npm install
      - name: Push to Main
        run: |
          git config --global user.name "tomsenior20"
          git config --global user.email "tomsenior20@gmail.com"
          git checkout main
          git merge FutureDevelopment
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
          